// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package email_sender is a generated GoMock package.
package email_sender

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReader) Read(n int) ([]*Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", n)
	ret0, _ := ret[0].([]*Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), n)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(emails []*Email) ([]*ErrEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", emails)
	ret0, _ := ret[0].([]*ErrEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(emails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), emails)
}

// MockTemplateParser is a mock of TemplateParser interface.
type MockTemplateParser struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateParserMockRecorder
}

// MockTemplateParserMockRecorder is the mock recorder for MockTemplateParser.
type MockTemplateParserMockRecorder struct {
	mock *MockTemplateParser
}

// NewMockTemplateParser creates a new mock instance.
func NewMockTemplateParser(ctrl *gomock.Controller) *MockTemplateParser {
	mock := &MockTemplateParser{ctrl: ctrl}
	mock.recorder = &MockTemplateParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateParser) EXPECT() *MockTemplateParserMockRecorder {
	return m.recorder
}

// ParseEmails mocks base method.
func (m *MockTemplateParser) ParseEmails(cs []*Customer) []*Email {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseEmails", cs)
	ret0, _ := ret[0].([]*Email)
	return ret0
}

// ParseEmails indicates an expected call of ParseEmails.
func (mr *MockTemplateParserMockRecorder) ParseEmails(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEmails", reflect.TypeOf((*MockTemplateParser)(nil).ParseEmails), cs)
}

// MockErrHandler is a mock of ErrHandler interface.
type MockErrHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrHandlerMockRecorder
}

// MockErrHandlerMockRecorder is the mock recorder for MockErrHandler.
type MockErrHandlerMockRecorder struct {
	mock *MockErrHandler
}

// NewMockErrHandler creates a new mock instance.
func NewMockErrHandler(ctrl *gomock.Controller) *MockErrHandler {
	mock := &MockErrHandler{ctrl: ctrl}
	mock.recorder = &MockErrHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrHandler) EXPECT() *MockErrHandlerMockRecorder {
	return m.recorder
}

// HandleErr mocks base method.
func (m *MockErrHandler) HandleErr(customers []*Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleErr", customers)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleErr indicates an expected call of HandleErr.
func (mr *MockErrHandlerMockRecorder) HandleErr(customers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleErr", reflect.TypeOf((*MockErrHandler)(nil).HandleErr), customers)
}
